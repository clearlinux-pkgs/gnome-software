From 80e94dfe4adb8883e5a144d51858bae61bf09f94 Mon Sep 17 00:00:00 2001
From: Josue David Hernandez Gutierrez <josue.d.hernandez.gutierrez@intel.com>
Date: Wed, 9 Jan 2019 21:36:27 -0600
Subject: [PATCH 1/4] [WIP] Integrating swupd to gnome-software

print bundles in bundle category, research how to add custom desktop groups (app categories)
install hook working.
remove hook working.
search work for bundle name.
real description is available.

to change:
- the installed bundles are not in the installed view
- search for description produce many memory leaks for sure fix it
- show just bundles in the bundle category

Signed-off-by: Josue David Hernandez Gutierrez <josue.d.hernandez.gutierrez@intel.com>
---
 meson_options.txt               |   1 +
 plugins/meson.build             |   3 +
 plugins/swupd/gs-plugin-swupd.c | 248 ++++++++++++++++++++++++++++++++
 plugins/swupd/meson.build       |  16 +++
 4 files changed, 268 insertions(+)
 create mode 100644 plugins/swupd/gs-plugin-swupd.c
 create mode 100644 plugins/swupd/meson.build

diff --git a/meson_options.txt b/meson_options.txt
index e19656fb..f766a0d4 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -7,6 +7,7 @@ option('packagekit_autoremove', type : 'boolean', value : false, description : '
 option('polkit', type : 'boolean', value : true, description : 'enable PolKit support')
 option('fwupd', type : 'boolean', value : true, description : 'enable fwupd support')
 option('flatpak', type : 'boolean', value : true, description : 'enable Flatpak support')
+option('swupd', type : 'boolean', value : true, description : 'enable Swupd support')
 option('rpm_ostree', type : 'boolean', value : false, description : 'enable rpm-ostree support')
 option('steam', type : 'boolean', value : true, description : 'enable Steam support')
 option('shell_extensions', type : 'boolean', value : true, description : 'enable shell extensions support')
diff --git a/plugins/meson.build b/plugins/meson.build
index 528743d3..d6df4b8a 100644
--- a/plugins/meson.build
+++ b/plugins/meson.build
@@ -13,6 +13,9 @@ subdir('dummy')
 subdir('epiphany')
 subdir('fedora-pkgdb-collections')
 
+if get_option('swupd')
+  subdir('swupd')
+endif
 if get_option('flatpak')
   subdir('flatpak')
 endif
diff --git a/plugins/swupd/gs-plugin-swupd.c b/plugins/swupd/gs-plugin-swupd.c
new file mode 100644
index 00000000..0ef70f50
--- /dev/null
+++ b/plugins/swupd/gs-plugin-swupd.c
@@ -0,0 +1,248 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+//#include <config.h>
+
+#include <gnome-software.h>
+
+
+
+// Adding the Bundles category
+gboolean
+gs_plugin_add_categories (GsPlugin *plugin,
+			  GPtrArray *list,
+			  GCancellable *cancellable,
+			  GError **error)
+{
+    GsCategory *bundles = gs_category_new ("clr-bundles");
+    gs_category_set_name(bundles, "Bundles");
+    gs_category_set_score (bundles,85);
+    gs_category_add_key_color (bundles, "#FF0000");
+    gs_category_set_icon (bundles, "text-editor-symbolic");
+    g_ptr_array_add (list, bundles);
+    
+    g_autoptr(GsCategory) sub = gs_category_new ("all");
+    gs_category_add_desktop_group (sub, "Utility");
+	gs_category_set_name (sub, "All");
+	gs_category_add_child (bundles, sub);
+    
+    return TRUE;
+}
+
+gboolean
+gs_plugin_swupd_is_installed (gchar *bundle_name)
+{
+    gchar *file_path = g_strdup_printf ("/usr/share/clear/bundles/%s", bundle_name);
+    gboolean ret = g_file_test (file_path, G_FILE_TEST_EXISTS);
+    g_free (file_path);
+    return ret;
+}
+
+
+// this section have many memory leaks for sure FIX IT
+void
+gs_plugin_swupd_create_app (GsApp *app,
+                 const gchar *bundle_name,
+                 GsCategory *category)
+{
+    gchar *file_content = NULL;
+    gchar *file_path = g_strdup_printf ("/usr/share/clr-bundles/%s", bundle_name);
+    gchar **file_lines = NULL;
+    gchar *desc = NULL;
+
+    g_debug ("file name %s", file_path);
+    
+    if (!g_file_get_contents (file_path,
+                     &file_content,
+                     NULL,
+                     NULL))
+        g_debug ("error with bundle %s", bundle_name);
+
+    // search for description
+    file_lines = g_strsplit (file_content, "\n", 5);
+    for (int i = 0; i < 5; i++) {
+        gchar *tmp_str = g_strrstr (file_lines[i], "# [DESCRIPTION]: ");
+        if (tmp_str != NULL) {
+            gchar **tmp_list = g_strsplit (tmp_str, ": ", 2);
+            desc = g_strdup(tmp_list[1]);
+            g_strfreev(tmp_list);
+            break;
+        }
+    }
+
+    gs_app_set_name (app, GS_APP_QUALITY_NORMAL, bundle_name);
+    gs_app_set_url (app, AS_URL_KIND_HOMEPAGE, "https://clearlinux.org/documentation/clear-linux/concepts/bundles-about");
+    gs_app_set_kind (app, AS_APP_KIND_DESKTOP);
+    if (gs_plugin_swupd_is_installed (bundle_name)) {
+        gs_app_set_state (app, AS_APP_STATE_INSTALLED);
+    } else {
+        gs_app_set_state (app, AS_APP_STATE_AVAILABLE);
+    }
+    gs_app_set_pixbuf (app, gdk_pixbuf_new_from_file ("/usr/share/icons/hicolor/48x48/actions/geany-close-all.png", NULL));
+    gs_app_add_category (app, "Utility");
+    gs_app_set_summary (app, GS_APP_QUALITY_NORMAL, desc);
+
+    g_strfreev(file_lines);
+    g_free (file_path);
+}
+
+gboolean
+gs_plugin_add_category_apps (GsPlugin *plugin,
+			     GsCategory *category,
+			     GsAppList *list,
+			     GCancellable *cancellable,
+			     GError **error)
+{
+    g_autoptr(GDir) bundles_path = NULL;
+    gchar *bname = NULL;
+
+    bundles_path = g_dir_open ("/usr/share/clr-bundles", 0, NULL);
+    while ((bname = g_dir_read_name (bundles_path)) != NULL) {
+
+        if (strcmp(bname, "packages") == 0) {
+            continue;
+        }
+        g_autoptr(GsApp) app = gs_app_new (NULL);
+        gs_plugin_swupd_create_app (app, bname, category);
+        gs_app_set_management_plugin (app, gs_plugin_get_name (plugin));
+        gs_app_list_add (list, app);
+    }
+    return TRUE;
+}
+
+gboolean
+gs_plugin_add_installed (GsPlugin *plugin,
+                         GsAppList *list,
+                         GCancellable *cancellable,
+                         GError **error)
+{
+    g_debug ("Installed section");
+    g_autoptr(GDir) bundles_path = NULL;
+    gchar *bname = NULL;
+    bundles_path = g_dir_open ("/usr/share/clear/bundles", 0, NULL);
+    while ((bname = g_dir_read_name (bundles_path)) != NULL) {
+
+        gchar *file_path = g_strdup_printf ("/usr/share/clr-bundles/%s", bname);
+        if (!g_file_test (file_path, G_FILE_TEST_EXISTS)) {
+            g_free (file_path);
+            continue;
+        }
+
+        g_debug ("Installed bundle name %s", bname);
+        g_autoptr(GsApp) app = gs_app_new (NULL);
+        gs_plugin_swupd_create_app (app, bname, NULL);
+        gs_app_set_management_plugin (app, gs_plugin_get_name (plugin));
+        gs_app_list_add (list, app);
+        g_free (file_path);
+    }
+    return TRUE;
+}
+
+gboolean
+gs_plugin_app_install (GsPlugin *plugin,
+                       GsApp *app,
+                       GCancellable *cancellable,
+                       GError **error)
+{
+    g_debug ("Installing bundle %s", gs_app_get_name (app));
+
+    gchar *argv[] = {"/usr/bin/sudo", "/usr/bin/swupd", "bundle-add", gs_app_get_name (app), NULL};
+    //gchar *argv[] = {"/usr/bin/ls", "/", NULL};
+    gchar *child_stdout=NULL;
+    gchar *child_stderr=NULL;
+    gint exit_status;
+    GPid child_pid;
+    g_autoptr(GError) error_swupd = NULL;
+
+    gs_app_set_state (app, AS_APP_STATE_INSTALLING);
+    g_spawn_sync (NULL, argv, NULL, G_SPAWN_DEFAULT, NULL,
+                          NULL, &child_stdout,
+                          &child_stderr, &exit_status, &error_swupd);
+    g_debug ("swupd output %s", child_stdout);
+    g_debug ("swupd stderr %s", child_stderr);
+    if (error_swupd != NULL)
+    {
+        g_error ("Spawning child failed: %s", error_swupd->message);
+        return FALSE;
+    }
+
+    gs_app_set_state (app, AS_APP_STATE_INSTALLED);
+    return TRUE;
+}
+
+gboolean
+gs_plugin_app_remove (GsPlugin *plugin,
+                      GsApp *app,
+                      GCancellable *cancellable,
+                      GError **error)
+{
+    g_debug ("Removing bundle %s", gs_app_get_name (app));
+
+    gchar *argv[] = {"/usr/bin/sudo", "/usr/bin/swupd", "bundle-remove", gs_app_get_name (app), NULL};
+    //gchar *argv[] = {"/usr/bin/ls", "/", NULL};
+    gchar *child_stdout=NULL;
+    gchar *child_stderr=NULL;
+    gint exit_status;
+    GPid child_pid;
+    g_autoptr(GError) error_swupd = NULL;
+
+    gs_app_set_state (app, AS_APP_STATE_REMOVING);
+    g_spawn_sync (NULL, argv, NULL, G_SPAWN_DEFAULT, NULL,
+                          NULL, &child_stdout,
+                          &child_stderr, &exit_status, &error_swupd);
+    g_debug ("swupd output %s", child_stdout);
+    g_debug ("swupd stderr %s", child_stderr);
+    if (error_swupd != NULL)
+    {
+        g_error ("Spawning child failed: %s", error_swupd->message);
+        return FALSE;
+    }
+
+    gs_app_set_state (app, AS_APP_STATE_AVAILABLE);
+    return TRUE;
+}
+
+
+gboolean
+gs_plugin_add_search (GsPlugin *plugin,
+                      gchar **values,
+                      GsAppList *list,
+                      GCancellable *cancellable,
+                      GError **error)
+{
+    gint i = 0;
+    for (i = 0; values[i] != NULL; i++) {
+        g_autoptr(GDir) bundles_path = NULL;
+        gchar *bname = NULL;
+
+        g_debug ("seach string %s", values[i]);
+        bundles_path = g_dir_open ("/usr/share/clr-bundles", 0, NULL);
+        while ((bname = g_dir_read_name (bundles_path)) != NULL) {
+            if (!g_str_has_prefix (bname, values[i]))
+                continue;
+
+            g_autoptr(GsApp) app = gs_app_new (NULL);
+            gs_plugin_swupd_create_app (app, bname, NULL);
+            gs_app_set_management_plugin (app, gs_plugin_get_name (plugin));
+            gs_app_list_add (list, app);
+        }
+    }
+
+    return TRUE;
+}
diff --git a/plugins/swupd/meson.build b/plugins/swupd/meson.build
new file mode 100644
index 00000000..dfac7d7d
--- /dev/null
+++ b/plugins/swupd/meson.build
@@ -0,0 +1,16 @@
+cargs = ['-DG_LOG_DOMAIN="GsPluginSwupd"']
+cargs += ['-DLOCALPLUGINDIR="' + meson.current_build_dir() + '"']
+cargs += ['-DLOCALPLUGINDIR_CORE="' + meson.current_build_dir() + '/../core"']
+
+shared_module(
+  'gs_plugin_swupd',
+  sources : 'gs-plugin-swupd.c',
+  include_directories : [
+    include_directories('../..'),
+    include_directories('../../lib'),
+  ],
+  install : true,
+  install_dir: plugin_dir,
+  c_args : cargs,
+  dependencies : [appstream_glib, gio_unix, gtk, libsoup]
+)
-- 
2.20.0

